import asyncio
import subprocess
import aiohttp
import time
import matplotlib.pyplot as plt
import json

data = {}


async def get_attack_info():
    address = 'http://localhost:5001/scoreboard/attack.json'
    async with aiohttp.ClientSession() as session:
        async with session.get(address) as r:
            r = await r.json()
            r = r["services"]["sceam"]["10.1.1.1"]
            keys = [int(i) for i in r.keys()]
            max_key = max(keys)
            r = r[str(max_key)]
            print(r)
            return r


def build_exploit_command(var_id, attack_info):
    process_params = ['enochecker_cli']

    # add checker address:
    # change port and address if not local
    process_params += ['-A', 'http://localhost:18008']

    # add service address:
    # change address if not local or not port forwarded
    process_params += ['-a', 'host.docker.internal']

    # add flag regex:
    process_params += ['--flag_regex', 'ENO[A-Za-z0-9+\/=]{48}']

    # variant id:
    process_params += ['-v', str(var_id)]

    # ASSUME THAT ATTACK_INFO ID IS THE SAME AS THE EXPLOIT ID!!!!!!!!!
    # add attack info:
    process_params += ['--attack_info', attack_info[str(var_id)][0]]

    # exploit
    process_params += ['exploit']
    return process_params


async def exploit_by_id(var_id, attack_info):
    process_params = build_exploit_command(var_id, attack_info)
    process = await asyncio.create_subprocess_exec(
        *process_params,
        stdout=subprocess.PIPE,
        stderr=subprocess.PIPE
    )
    stdout, stderr = await process.communicate()
    out = stdout.decode("utf-8")
    if "OK" not in out:
        print(f"Exploit failed with return code {process.returncode}")
        print(f"stdout: {stdout.decode()}")
        print(f"stderr: {stderr.decode()}")


async def exploit(id, num, infinite=1):
    for i in range(infinite):
        info = await get_attack_info()
        start_time = time.time()
        tasks = [exploit_by_id(id, info) for _ in range(num)]
        await asyncio.gather(*tasks)
        time_taken = time.time() - start_time
        data[id].append(time_taken)
        print(f"Exploited {id} {num} times in {time_taken} seconds")


def run():
    batch = 50
    n = 20
    ids = [0, 1, 2]
    for i in ids:
        data[i] = []
        asyncio.run(exploit(i, batch, n))


if __name__ == "__main__":
    if True:
        run()
        with open("exploit_data.json", "w") as f:
            json.dump(data, f)
    else:
        with open("exploit_data.json", "r") as f:
            data = json.load(f)

    plot, ax = plt.subplots()
    for i in data:
        ax.plot(data[i], label=f"Exploit {i}")
    ax.legend()

    plt.show()
