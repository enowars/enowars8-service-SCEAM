import cv2
from PIL import Image
import numpy as np
from qreader import QReader
from pyzbar.pyzbar import decode
from skimage import restoration
import os
import io

qrReader = QReader()
blur_sigma = 6  # Standard deviation for Gaussian kernel
kernel_size = 15  # Kernel size used for blurring
kernel_1d = cv2.getGaussianKernel(kernel_size, blur_sigma)
kernel = np.outer(kernel_1d, kernel_1d.transpose())


def read_qr_code(image) -> str:
    qr_data = decode(image)
    if not qr_data:
        image = np.array(image)
        qr_data = qrReader.detect_and_decode(image)
        if not qr_data:
            return None
        return qr_data[0]
    return qr_data[0].data.decode('utf-8')


def unblur(image):
    restored_img = np.zeros_like(image, dtype=np.float32)
    for i in range(3):
        restored_img[:, :, i] = restoration.wiener(
            image[:, :, i], kernel, 0.01, clip=False)
    restored_img = np.clip(restored_img, 0, 1)
    restored_img = (restored_img * 255).astype(np.uint8)
    return restored_img


# Ensure the correct image path
im_path = os.path.join(os.path.dirname(__file__), 'MXO70AI0UKR04F0X9X2U.png')
if not os.path.exists(im_path):
    raise FileNotFoundError(f"Image file not found: {im_path}")

# Read the image
img = Image.open(im_path)
img = np.array(img, dtype=np.float32)
img = cv2.cvtColor(img, cv2.COLOR_RGB2BGR)


# Debug: Display the original image
cv2.imshow('original', img)
cv2.waitKey(0)

# Convert the image to float32 for deblurring
img_float = img.astype(np.float32) / 255.0

# Apply the unblur function using Richardson-Lucy deconvolution
restored_cv2_image = unblur(img_float)

# Debug: Display the restored image
cv2.imshow('restored', restored_cv2_image)
cv2.waitKey(0)

# Convert the restored image for PIL
restored_pil_image = cv2.cvtColor(restored_cv2_image, cv2.COLOR_BGR2RGB)
restored_pil_image = Image.fromarray(restored_pil_image)

# Optional: Show the restored image using PIL
# restored_pil_image.show()

# Read the QR code
flag = read_qr_code(restored_pil_image)
print(flag)
